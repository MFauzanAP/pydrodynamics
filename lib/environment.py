import numpy as np

from lib.utils import state_object_to_array, world_to_body

class Environment:
	"""
		Calculates the external forces and moments generated by the surrounding water, for example:
		- Buoyancy
		- Gravity
		- Drag
		- Lift
		- Added mass
	"""
	def __init__(self, params):
		self.params = params

	def calculate(self, state):
		"""
			Calculate the external forces and moments acting on the vehicle, all in body-fixed frame:

			Input:
                state: The current state of the vehicle, including position, orientation, linear velocity, angular velocity, and voltage.
            Output:
				tau_env: External forces and moments from the environment in (6,) format, including:
					- tau_hydrostatic: Hydrostatic forces and moments from gravity and buoyancy
					- tau_drag: Drag stemming from hydrodynamic damping
					- tau_lift: Lift forces and moments
					- tau_added_mass: Added mass forces and moments
		"""
		# Convert state to numpy array
		state = state_object_to_array(state)

		tau_hydrostatic = self.calculate_hydrostatic(state)
		tau_drag = 0 # self.calculate_drag(state)
		tau_lift = 0 # self.calculate_lift(state)
		tau_added_mass = 0 # self.calculate_added_mass(state)

		tau_env = tau_hydrostatic + tau_drag + tau_lift + tau_added_mass
		return tau_env

	def calculate_hydrostatic(self, state):
		"""
			Calculate the hydrostatic forces and moments acting on the vehicle.
			Includes buoyancy and gravity.
			Input:
				state: The current state of the vehicle.
			Output:
				tau_hydrostatic: Hydrostatic forces and moments in body-fixed frame.
		"""
		# Calculate rotation matrix from world frame to body-fixed frame
		r_trans = world_to_body(state)[0]

		# Calculate gravity and buoyancy forces in body-fixed frame, up is negative z
		gravity_force = np.matmul(r_trans, np.array([0, 0, self.params.get('mass') * self.params.get('gravity')]))
		buoyancy_force = np.matmul(r_trans, np.array([0, 0, -1 * self.params.get('volume') * self.params.get('density') * self.params.get('gravity')]))

		# Make vector for CoM and CoB
		com = np.array([self.params.get('xg'), self.params.get('yg'), self.params.get('zg')])
		cob = np.array([self.params.get('xb'), self.params.get('yb'), self.params.get('zb')])

		# Calculate the total hydrostatic force
		hydrostatic_forces = gravity_force + buoyancy_force
		hydrostatic_moments = np.cross(com, gravity_force) + np.cross(cob, buoyancy_force)

		# Merge forces and moments into a single vector
		return np.concatenate((hydrostatic_forces, hydrostatic_moments), axis=0).reshape((6,))
